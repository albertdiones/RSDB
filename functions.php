<?php
/**
 * Created by PhpStorm.
 * @author albert
 * Date: 4/2/15
 * Time: 8:08 PM
 */
/*
   ****************************************
         all about CONNECTIONS!!!
   ****************************************
*/
function RSDB_connect($db="",$table="") {

//A function to initiate the database and the table

   $p=array();
   $p['db']=$db;
   $p['table']=$table;
   /*This object will contain the
   ->Directory
   ->Errors
   ->Database Name
   ->Table name
   ->Database Operations(Methods)
   */
   return RSDB_var('connect',new RSDBconnection($p));

}
function RSDB_valid_global(&$var,$name) {

//A function to easily and uniformly know existing globals
   if (!$var)
      $var=RSDB_var($name);
   if ($var)
      return true;
   if ($name == "connect") {
      if ( $var = RSDB_connect() ) {
         return true;
      }
   }
   return false;
}
function RSDB_var($name,$value="") {
//A function to conveniently read/write globals_with_long_names
   $real_name=$name;
   $name="GLOBAL_RSDB_VAR_$name";
   if (is_array($GLOBALS[$name])) {
      $key=count($GLOBALS[$name]);
      if ($value) {
         $GLOBALS[$name][$key]=$value;
         $ret=$GLOBALS[$name][$key];
      }
      else
         $ret=$GLOBALS[$name][$key-1];
      return $ret;
   }
   if ($value)
      $GLOBALS[$name]=$value;
   return $GLOBALS[$name];
}
/*
   ****************************************
         all about DATABASES!!!
   ****************************************
*/
function RSDB_show_dbs() {
   $files=scandir(RSDB::root);
   foreach ($files as $f) {
      if ($f=="." || $f==".." || strpos($f,"."))
         continue;
      $db[]=$f;
   }
   return $db;
}
function RSDB_mk_db($db,&$link="") {

//Makes a database, $db = name of database, $link is the connection (optional)

//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   $d="{$link->root}$db/";
   if (!file_exists($d))
      if (RSDB::mkdir($d)) {

         $link->log="Database $d created";
         return true;
      }
      else {
         $link->errorMessage="Database cannot be created";
         return false;
      }
   else {
      $link->errorMessage="Database already exists";
      return false;
   }
}
function RSDB_drop_db($db,&$link="") {

//Drops a database, (recursively deletes the directory, subdirectories and files)

   if (!RSDB_valid_global($link,'connect'))
      return false;
   $link->select_db($db);
   $link->deleteDir($link->dir);
}
/*
   ****************************************
         all about TABLES!!!
   ****************************************
*/
function RSDB_show_tables(&$link='') {
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (isset($link->database))
      $link->select_db($link->database);
   else {
      $link->errorMessage="No Database Selected";
      return false;
   }
   $files=scandir($link->dir);
   foreach ($files as $f) {
      if ($f=="." || $f==".." || strpos($f,"."))
         continue;
      $table[]=$f;
   }
   return $table;
}
function RSDB_mk_table($table,$cols,&$link="") {

//Creates a table $table with columns $cols array values

//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (isset($link->database))
      $link->select_db($link->database);
   else {
      $link->errorMessage="No Database Selected";
      return false;
   }
   $d="{$link->dir}$table/";
   if (!file_exists($d)) {
      RSDB::mkdir($d);
      @chmod($d,0777);
   }
   if (file_exists($d))
      $link->log="Successfuly Created $d";
   else
      $link->errorMessage="<b>Failed to create</b> $d";
   $link->select_table($table);
   if (!file_exists($link->getFileLocCol()))
      RSDB::mkdir($link->getFileLocCol());
   foreach ($cols as $k=>$col)
   {
      if (is_array($col)) {
         $meta=$col;
         $col=$k;
      }
      $file=$link->getFileLocCol($col);
      $col_contents=$link->arrayFormat($col);
      $link->write($file,$col_contents);
      if (file_exists($file))
         $link->log="Successfuly Created $file";
      else
         $link->errorMessage="<b>Failed to create</b> $file";
      if ($meta) {
         if (RSDB_meta($col,$meta,$link))
            $link->log="Succesfully added meta";
         unset($meta);
      }

   }
}
function RSDB_drop_table($table,&$link='') {

//Drops (delete) a table by deleting it recursively

//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$table)
      $table=$link->table;
   if (!$table) {
      $link->errorMessage="No table found";
      return false;
   }
   RSDB_select_table($table,$link);
   $col_dir=$link->getFileLocCol();
   $link->deleteDir($col_dir);
   $link->deleteDir($link->dir);
   $link->log="Table $table dropped";
}
function RSDB_reset_table($table="",&$link='') {

//Clear out all the rows on the table(but doesn't delete the table)

//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$link)
      return false;
   if (!$table && $link->table) {
      $table=$link->table;
   }
   RSDB_select_table($table,$link);
   $indexes=RSDB_show_rows($table,$link);
   foreach ($indexes as $index) {
      RSDB_delete($index,$link);
   }
   $cols=RSDB_show_columns($table,$link);
   foreach ($cols as $col)
   {
      $file=$link->getFileLocCol($col);
      $contents=$link->arrayFormat(array());
      $link->write($file,$contents);
      if (file_exists($file))
         $link->log="Successfuly Created $file";
      else
         $link->errorMessage="<b>Failed to create</b> $file";

   }
}
function RSDB_refresh_table($table="",&$link='') {

//Reads and rewrites the rows one-by-one to apply new file formats or pinging the columns

//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$table)
      $table=$link->table;
   if (!$table)
      return false;
   $link->select_table($table);
   $rows=RSDB_show_rows($table,$link);
   foreach ($rows as $rown) {
      $row=$link->read($rown);
      RSDB_insert($row,$link,$rown);
   }
}
/*
   ****************************************
         all about WRITING!!!
   ****************************************
*/
function RSDB_insert($row,&$link='',$ind=null) {

//Inserts a row to the table, if $ind is given, the row $ind is updated

//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect')) {
      die("NO Link");
      return false;
   }
   if (!$link->table)
      return "Failed to insert: table is not yet set!";
   if ($ind===null) {
      $ind=$link->getNextVacant();
      $row['__ptime__']=$row['__ctime__']=time();
      $link->operation_done=insert;
   }
   else {
      $db_row=$link->read($ind);
      $link->refresh();
      $db_row['__ctime__']=$db_row['__ctime__'] ? $db_row['__ctime__'] : filectime($link->getFileLoc($ind));
      $row['__ptime__']=$db_row['__ptime__'] ? $db_row['__ptime__'] : filectime($link->getFileLoc($ind));
      $row['__ctime__']=time();
      $link->operation_done='update';
   }
#	foreach ($row as $field=>$value) {
#		$rowArrayItems.=$link->arrayItemFormat($field,$value);
#	}
   $cols=RSDB_show_columns($link->table,$link);
   foreach ($cols as $field) {
      if (!($link->validate_field($row[$field],$field))) {
         $link->errorMessage="Failed to insert: value is not valid";
         return false;
      }
   }
   //Check if it is not same as the recorded
   if ($db_row) {
      $cmp_row=$row;
      $cmp_db_row=$db_row;
      $magics=array('__index__','__ptime__','__ctime__');
      foreach ($magics as $magic) {
         unset($cmp_row[$magic]);
         unset($cmp_db_row[$magic]);
      }
      if ($cmp_row==$cmp_db_row) {
         $row['__ctime__']=$db_row['__ctime__'];
      }
   }
   //Fills $rowfile with the php file string
   $rowfile=$link->arrayFormat($ind,$row);
   if ($link->write("$link->dir$ind.php",$rowfile)) {
      //Updates each columns
      foreach ($row as $field=>$value){
         $link->insertToCol($field,$ind,$value);
      }
   }
   return RSDB_var('insert',new RSDB_result($ind,1,$link,'insert'));
}
function RSDB_update($row,& $link='') {
   if (!RSDB_valid_global($link,'connect')) {
      die("NO Link");
      return false;
   }
   return RSDB_insert($row,$link,$row['__index__']);
}
function RSDB_delete($ind,&$link='') {

//Deletes a row by $ind ($index)

//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   $row=$link->read($ind);
   foreach ($row as $field=>$value) {
      $colFile=$link->getFileLocCol($field);
      $link->replaceFileItem($link->arrayItemFormat($ind,$value),"",$colFile);
   }
   @unlink($link->getFileLoc($ind));
   return "Successfully deleted all row $ind components";
}
/*
   ****************************************
         all about READING!!!
   ****************************************
*/
function RSDB_row($row,&$link='') {
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$link)
      return false;
   if (!$row)
      return false;
   $result=RSDB_var('select',new RSDB_result(array($row),1,$link));
   return $result->fetch_array();
}
function RSDB_select($field=NULL,$needle=NULL,&$link=NULL) {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if ($field===NULL) {
      $result=RSDB_show_rows($link);
      $total=count($result);
      $result=RSDB_var('select',new RSDB_result($result,$total,$link));
      return $result;
   }
   if (is_string($field))
      $field=array($field);
   $result=array();
   $total=0;
   foreach ($field as $f) {
      $field_array=$link->readCol($f);
      if ($needle!==NULL || $needle === 'BLANK')
      {
         if ($needle === 'BLANK')
            $needle = '';
         #$link->log=gettype($needle);
         #type strict
         if (is_string($needle))
            $type_strict=false;
         else
            $type_strict=true;
         $link->log="using 2 parameters for (".gettype($needle).") $needle on $link->table on $link->database";
         if (is_array($field_array) && $keys=array_keys($field_array,$needle,$type_strict))
         {
            if ($total<count(array_keys($field_array)))
               $total+=count(array_keys($field_array));
            $result=array_merge($result,$keys);
         }
      }
      else
      {
         //If no needle is given,record all array index
         if (!is_array($field_array)) {
            $link->errorMessage="No records on the column";
            return false;
         }
         if ($keys=array_keys($field_array))
         {
            if ($total<count(array_keys($field_array)))
               $total+=count(array_keys($field_array));
            $result=array_merge($result,$keys);
         }
      }
   }
   $result=RSDB_var('select',new RSDB_result($result,$total,$link));
   if ($result->indexes)
      return $result;
   else
      return false;
}

function RSDB_select_like($field,$needle,&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$needle) {
      return RSDB_select($field,$needle);
   }
   $result=array();
   $col = $link->readCol($field);
   $total = count($col);
   foreach ($col as $index=>$value) {
      if (is_array($value)) {
         $needle_position = in_array($needle,$value);
      }
      else
         $needle_position = stripos($value,$needle);
      if ($needle_position===false)
         continue;
      else if ($needle_position) {
         if ($index!=0)
            $result[]=$index;
      }
   }
   if ($result) {
      $result=RSDB_var('select',new RSDB_result($result,$total,$link));
      if ($result->indexes) {
         return $result;
      }
      else {
         unset($result);
         return false;
      }
   }
   else
      return false;
}

function RSDB_fetch_first_array($field,$needle,&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   $result=RSDB_select($field,$needle,$link);
   if ($result)
      return $result->fetch_array();
   else
      return false;
}
function RSDB_fetch_array(&$result="") {
   if (!$result)
      $result=RSDB_var('select');
   if (!$result)
      return false;
   return $result->fetch_array();
}
function RSDB_shuffle(&$result="") {
   if (!$result)
      $result=RSDB_var('select');
   if (!$result)
      return false;
   $result->shuffle();
}
function RSDB_sort(&$result="",$type="") {
   if (!$result)
      $result=RSDB_var('select');
   if (!$result)
      return false;
   $func = "sort_$type";
   $result->$func();
}
function RSDB_num_rows(&$result="") {
   if (!RSDB_valid_global($link,'select'))
      return false;
   if (!$result)
      return false;
   return $result->num_rows();
}
function RSDB_show_columns($table="",&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$table)
      $table=$link->table;
   if (!$table)
      return false;
   RSDB_select_table($table);
   $dir=$link->getFileLocCol();
   $files=scandir($dir);
   $cols=array();
   foreach ($files as $f) {
      if (strpos($f,".php"))
         $cols[count($cols)]=str_replace(".php","",$f);
   }
   return $cols;
}
function RSDB_show_rows($table='',&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   $files=scandir($link->dir);
   foreach ($files as $f) {
      if ($f=="." || $f==".." || strpos($f,".")===false)
         continue;
      $f=str_replace('.php','',$f);
      $indexes[]=$f;
   }
   return $indexes;
}
/*
   ****************************************
         all about ADMINISTRATION!!!
   ****************************************
*/
function RSDB_purge_backup(&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   $link->deleteDir($link->replica_root,true);
}
function RSDB_execute($cmd,&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   $temp_file=$link->root."temp.php";

   $cmd=strpos($cmd,"<?php")!==0 ? "<?php\n".$cmd : $cmd;
   $link->write($temp_file,$cmd);
   include($temp_file);
   echo RSDB_log();
   echo RSDB_error_log();

}
function RSDB_array_to_HTML_table($array) {
   foreach ($array as $key=>$value) {
      $top_row.="<td> $key </td>";
      if (is_array($value))
         $value=implode(",",$value);
      $bottom_row.="<td> $value </td>";
   }
   return "<table border=3><tr>$top_row</tr><tr>$bottom_row</tr></table>";
}
function RSDB_HTML_row($row,$cols=null,$attr=null) {
   if ($cols) {
      foreach ($cols as $order=>$col) {
         if (is_array($row[$col]))
            $row[$col]= RSDB_array_to_HTML_table($row[$col]);
         $ret.="<td $attr><xmp>{$row[$col]}</xmp></td>";
      }
   }
   else {
      foreach ($row as $field=>$value) {
         if (is_array($value))
            $value= RSDB_array_to_HTML_table($value);
         $ret.="<td $attr><xmp>$value</xmp></td>";
      }
   }
   return "<tr $attr>$ret</tr>";
}
function RSDB_HTML_selection_table(& $result='') {
   if (!RSDB_valid_global($result,'select'))
      return false;
   $result->reset_pointer();
   $cols=RSDB_show_columns($result->table,$result);
   if (!in_array('__index___',$cols))
      $cols[]='__index__';
   if (!in_array('__ctime__',$cols))
      $cols[]='__ctime__';
   $html=RSDB_HTML_row($cols);
   while ($row=RSDB_fetch_array()) {
      $html.=RSDB_HTML_row($row,$cols);
   }
   $html="<table border=3 style='width:100%'>$html</table>";
   $num_rows=RSDB_num_rows($result);
   $html="number of rows: $num_rows <br /> $html";
   return $html;
}
function RSDB_HTML_insertion_table(& $result='') {
   if (!RSDB_valid_global($result,'insert'))
      return false;
   if (!$result->index)
      die("Can't Get The Latest/Given Result ".$result);
   $insert_id=$result->index;
   $add=-10;
   $lim=0;
   $affected_rows=$result->index;//implode(',',$result->indexes);
   if ($result->operation_done=='update') {
      $add=-5;
      $lim=5;
   }
   $cols=RSDB_show_columns();
   $html=RSDB_HTML_row($cols);
   while ($add<=$lim) {
      $row=RSDB_row($insert_id+$add);
      if ($add===0)
         $attr='color="red"';
      if ($row)
         $html.=RSDB_HTML_row($row,$cols,$attr);
      $add++;
   }
   $html="<table>$html</table>";
   $num_affected_rows=$result->affected_rows();
   $html="Affected rows ($num_affected_rows) # $affected_rows<br />$html";
   return $html;
}
/*
   ****************************************
         Backup Copying Functions
   ****************************************
*/
function replica_parent_dir() {
   return "/home/albertd/public_html/wow300.net/";
}
function replica_dir() {
   return "/home/albertd/public_html/wow300.net/RSDB/";
}
function replicate($directory) {
   return;
   static $recurse=1;
   $dir=str_replace(replica_parent_dir(),"",$directory);
   $dir=ltrim($dir,"/");
   $dirs=explode('/',$dir);
   $DIR=replica_dir();
   if (recurse==1)
      RSDB::delete_dir($DIR,true);
   foreach ($dirs as $dir) {
      $DIR.="$dir/";
      if (!file_exists($DIR)) {
         RSDB::mkdir($DIR);
         @chmod($DIR,0777);

      }
   }
   $files=scandir($directory);
   foreach ($files as $file) {
      if ($file=="." || $file=="..")
         continue;
      $path=$directory.$file;
      if (is_dir($path)) {
         $path.="/";
         replicate($path);
      }
      else {
         $contents=file_get_contents($path);
         $rep_path=$DIR.$file;
         var_dump($rep_path);
         echo "<br />";
         replica_write($rep_path,$contents);
      }
   }
   $recurse++;
}
function replica_write($f,$c) {
   if (file_exists($f))
   {
      if (!is_writable($f))
         @chmod($f,0777);
      if (is_writable($f))
      {
         $f=fopen($f,w);
         fwrite($f,$c);
         fclose($f);
         return true;
      }
   }
   else
   {
      $f=fopen($f,x);
      fwrite($f,$c);
      fclose($f);
      return true;
   }
}
function RSDB_select_db($db,&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if ($link->select_db($db)) {
      $link->log="$db database selected";
      return RSDB_var('connect',$link);
   }
   return false;
}
function RSDB_select_table($table,&$link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (strpos($table,".")) {
      $path=explode(".",$table);
      RSDB_select_db($path[0]);
      $table=$path[1];
   }
   if ($link->select_table($table)) {
      $link->log="$table table selected";
      return RSDB_var('connect',$link);
   }
   return false;
}
function col_exists($field,& $link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$link)
      return false;
   if (in_array($field,RSDB_show_columns($link->table,$link)))
      return true;
   return false;
}
function RSDB_meta($field,$arr='',& $link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$link)
      return false;
   if ($arr) {
      if (col_exists($field,$link)) {
         $link->write_meta($field,$arr);
         return true;
      }
      else {
         $link->errorMessage="Column does not exist!";
         return false;
      }
   }
   return $link->read_meta($field);
}
function RSDB_error_log(& $link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$link)
      return false;
   return $link->errorMessage;
}
function RSDB_log(& $link='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$link)
      return false;
   return $link->log;
}
//Global Validators
function valid_for_not_null($value,$field) {
   if (isset($value) && $value!=null)
      return true;
   return false;
}
function valid_for_unique($value,$field) {
   $result=RSDB_select($field,$value);
   if (RSDB_num_rows()<=1)
      return true;
   return false;
}
function valid_for_max_length($value,$requirement) {
   if (strlen($value)<=$requirement)
      return true;
   return false;
}
function valid_for_min_length($value,$requirement) {
   if (strlen($value)>=$requirement)
      return true;
   return false;
}
function valid_for_type($value,$requirement) {
   $function="is_$requirement";
   if ($function($value))
      return true;
   return false;
}
function valid_for_allowed_chars($value,$requirement) {
   $x=0;
   if (preg_match('/^\/.*\/$/',$requirement)) {
      if (preg_match($requirement,$value))
         return true;
      else
         return false;
   }
   while (isset($value[$x])) {
      if (strpos($requirement,$value[$x])===false)
         return false;
   }
   return true;
}
function valid_for_enum($value,$requirement) {
   if (in_array($value,$requirement))
      return true;
   return false;
}
function RSDB_list_random_rows($format='',$table='',$no=10,&$link='',$flags='') {
//If no $link is given, get the latest object generated by RSDB_connect
   if ($flags)
      $flags=explode(" ",$flags);
   if (!RSDB_valid_global($link,'connect'))
      return false;
   if (!$link)
      return false;
   if (!$table)
      RSDB_select_table($link->table);
   RSDB_select_table($table);
   $selection=RSDB_select();
   RSDB_shuffle();
   for ($x=1; $x<=$no; $x++) {
      $row=RSDB_fetch_array($selection);
      $LI=$format;
      foreach ($row as $field=>$value) {
         if ($flags) {
            foreach ($flags as $flag) {
               $value=$flag($value);
            }
         }
         $LI=str_replace("{".$field."}",$value,$LI);
      }
      $UL.=$LI;
   }
   $UL="<ul>$UL</ul>";
   return $UL;
}
